% aggregation = 0 % multiplicative aggregation
% aggregation = 1 % additive aggregation
function [test_acc, test_kappa, test_f1, test_sens, test_spec, test_classwise_sens, test_classwise_sel, test_C, train_acc, ...
          train_kappa, train_f1, train_sens, train_spec, train_classwise_sens, train_classwise_sel, train_C, ] = eval_2maxcnn_one2many(nfilter, nchan, aggregation)

    addpath('./evaluation/');

    if(nargin == 0)
        nfilter = 1000;
        nchan = 2;
        aggregation = 0;
    end
    
    Ncat = 5;
    
    output_context_size = 3;
    half = floor(output_context_size/2);

    Nfold = 20;
    yh = cell(Nfold,1);
    yt = cell(Nfold,1);

    %% test set
    for fold = 1 : Nfold
        fold
        
        load(['./tensorflow_net/wilson_2max_cnn_1to3/cnn1d_sleep_357_',num2str(nfilter),'_(08)_eval_',num2str(nchan),'chan_dropout(0.6)/n', num2str(fold), '/test_ret_model_acc.mat']);
        score2 = softmax(score2);
        score1 = softmax(score1);
        score1 = [score1((1+half):end,:); ones(1,Ncat)];
        score3 = softmax(score3);
        score3 = [ones(1,Ncat); score3(1:(end-half),:)];
        if(aggregation == 0)
            score = (score1.* score2 .* score3)/output_context_size;
        else
            score = (score1 + score2 + score3)/output_context_size;
        end
        yhat = zeros(1,size(score,1));
        for i = 1 : size(score,1)
            [~, yhat(i)] = max(score(i,:));
        end
        yh{fold} = double(yhat');
        
        % load ground-truth labels (test set)
        load(['./data_processing/mat/n', num2str(fold,'%02d'), '_cnn_filterbank_eeg.mat'], 'label');
        yt{fold} = double(label);      
        
    end
    yh = cell2mat(yh);
    yt = cell2mat(yt);
    
    [test_acc, test_kappa, test_f1, test_sens, test_spec] = calculate_overall_metrics(yt, yh);
    [test_classwise_sens, test_classwise_sel]  = calculate_classwise_sens_sel(yt, yh);
    test_C = confusionmat(yt, yh);
    test.acc
   
    %% train set
    for fold = 1 : Nfold
        fold
        
        load(['./tensorflow_net/wilson_2max_cnn_1to3/cnn1d_sleep_357_',num2str(nfilter),'_(08)_eval_',num2str(nchan),'chan_dropout(0.6)/n', num2str(fold), '/train_ret_model_acc.mat']);
        score2 = softmax(score2);
        score1 = softmax(score1);
        score1 = [score1((1+half):end,:); ones(1,Ncat)];
        score3 = softmax(score3);
        score3 = [ones(1,Ncat); score3(1:(end-half),:)];
        if(aggregation == 0)
            score = (score1.* score2 .* score3)/output_context_size;
        else
            score = (score1 + score2 + score3)/output_context_size;
        end
        yhat = zeros(1,size(score,1));
        for i = 1 : size(score,1)
            [~, yhat(i)] = max(score(i,:));
        end
        yh{fold} = double(yhat');        
        
        % load ground-truth labels (train set)
        train_label = [];
        train_list = importdata(['./data_processing/tf_data/cnn_filterbank_eval_eeg/train_list_n', num2str(fold, '%d'),'.txt']);
        for i =1:length(train_list.textdata)
            train = load(train_list.textdata{i}(5:end), 'label');
            train_label = [train_label; train.label];
        end
        yt{fold} = double(train_label); 
        
    end
    yh = cell2mat(yh);
    yt = cell2mat(yt);
    
    [train_acc, train_kappa, train_f1, train_sens, train_spec] = calculate_overall_metrics(yt, yh);
    [train_classwise_sens, train_classwise_sel]  = calculate_classwise_sens_sel(yt, yh);
    train_C = confusionmat(yt, yh);
    
    %% dev set
    for fold = 1 : Nfold
        fold
        
        load(['./tensorflow_net/wilson_2max_cnn_1to3/cnn1d_sleep_357_',num2str(nfilter),'_(08)_eval_',num2str(nchan),'chan_dropout(0.6)/n', num2str(fold), '/eval_ret_model_acc.mat']);
        score2 = softmax(score2);
        score1 = softmax(score1);
        score1 = [score1((1+half):end,:); ones(1,Ncat)];
        score3 = softmax(score3);
        score3 = [ones(1,Ncat); score3(1:(end-half),:)];
        if(aggregation == 0)
            score = (score1.* score2 .* score3)/output_context_size;
        else
            score = (score1 + score2 + score3)/output_context_size;
        end
        yhat = zeros(1,size(score,1));
        for i = 1 : size(score,1)
            [~, yhat(i)] = max(score(i,:));
        end
        yh{fold} = double(yhat');
      
        % load ground-truth labels (dev set)
        eval_label = [];
        eval_list = importdata(['./data_processing/tf_data/cnn_filterbank_eval_eeg/eval_list_n', num2str(fold, '%d'),'.txt']);
        for i =1:length(eval_list.textdata)
            eval = load(train_list.textdata{i}(5:end), 'label');
            eval_label = [eval_label; eval.label];
        end
        yt{fold} = double(eval_label);
        
    end
    yh = cell2mat(yh);
    yt = cell2mat(yt);
    
    [eval_acc, eval_kappa, eval_f1, eval_sens, eval_spec] = calculate_overall_metrics(yt, yh);
    [eval_classwise_sens, eval_classwise_sel]  = calculate_classwise_sens_sel(yt, yh);
    eval_C = confusionmat(yt, yh);
end